#!/usr/bin/env python3
"""
Diagn√≥stico Integral de BD y CSS - AstroTech
============================================

Script completo para verificar:
1. ¬øQu√© base de datos est√° usando realmente la app?
2. ¬øQu√© datos contiene?
3. ¬øQu√© archivos CSS est√°n cargados?
4. ¬øHay conflictos CSS o BD?

Resultado: An√°lisis completo del problema de selecci√≥n de veh√≠culos
"""

import os
import sqlite3
import hashlib
from pathlib import Path

def get_file_info(filepath):
    """Obtener informaci√≥n detallada de un archivo"""
    if Path(filepath).exists():
        stat = Path(filepath).stat()
        return {
            "exists": True,
            "size": stat.st_size,
            "modified": stat.st_mtime,
            "readable": os.access(filepath, os.R_OK)
        }
    return {"exists": False, "size": 0, "modified": 0, "readable": False}

def check_database_contents(db_path):
    """Verificar contenido espec√≠fico de una base de datos"""
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Lista todas las tablas
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()

        result = {"path": db_path, "tables": {}, "total_vehicles": 0}

        for table_name, in tables:
            # Contar registros
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            result["tables"][table_name] = count

            # Si es tabla de veh√≠culos, verificar estructura
            if 'vehicle' in table_name.lower():
                result["total_vehicles"] = count
                if count > 0:
                    # Verificar tipos de combustible
                    cursor.execute(f"SELECT DISTINCT fuel_type FROM {table_name} LIMIT 5")
                    fuels = cursor.fetchall()
                    result["sample_fuels"] = [f[0] for f in fuels if f[0]]

                    # Verificar marcas
                    cursor.execute(f"SELECT DISTINCT brand FROM {table_name} LIMIT 10")
                    brands = cursor.fetchall()
                    result["sample_brands"] = [b[0] for b in brands if b[0]]

                    # Verificar estructura de columnas
                    cursor.execute(f"PRAGMA table_info({table_name})")
                    columns = cursor.fetchall()
                    result["columns"] = [col[1] for col in columns]

        conn.close()
        return result

    except Exception as e:
        return {"path": db_path, "error": str(e), "tables": {}}

def analyze_python_imports():
    """Analizar qu√© archivos Python referencian qu√© BD"""
    python_files = []
    for root, dirs, files in os.walk('.'):
        # Skip .venv y .git
        if '.venv' in root or '.git' in root:
            continue
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()

                    # Buscar referencias a bases de datos
                    db_refs = []
                    if 'astrotech.db' in content:
                        db_refs.append('astrotech.db')
                    if 'vehicles.db' in content:
                        db_refs.append('vehicles.db')
                    if 'vehicles_expanded.db' in content:
                        db_refs.append('vehicles_expanded.db')
                    if 'reflex.db' in content:
                        db_refs.append('reflex.db')

                    if db_refs:
                        python_files.append({
                            "file": filepath,
                            "db_references": db_refs,
                            "has_vehicle_import": 'vehicle' in content.lower()
                        })
                except:
                    pass

    return python_files

def check_css_files():
    """Verificar archivos CSS y sus contenidos"""
    css_files = []
    css_locations = [
        'assets/styles.css',
        'assets/selector-fix.css',
        '.web/styles.css',
        '.web/selector-fix.css'
    ]

    for css_path in css_locations:
        info = get_file_info(css_path)
        if info["exists"]:
            try:
                with open(css_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                # Analizar contenido CSS
                css_files.append({
                    "path": css_path,
                    "size": info["size"],
                    "has_select_styles": 'select' in content.lower(),
                    "has_radix_styles": 'radix' in content.lower(),
                    "has_vehicle_styles": 'vehicle' in content.lower(),
                    "has_pointer_events": 'pointer-events' in content,
                    "line_count": len(content.splitlines())
                })
            except Exception as e:
                css_files.append({
                    "path": css_path,
                    "size": info["size"],
                    "error": str(e),
                    "line_count": 0
                })
        else:
            css_files.append({
                "path": css_path,
                "exists": False
            })

    return css_files

def main():
    print("="*80)
    print("DIAGNOSTICO INTEGRAL DE ASTROTECH - BD y CSS")
    print("="*80)

    # 1. Verificar archivos de BD
    print("\nANALISIS DE ARCHIVOS DE BASE DE DATOS:")
    print("-"*50)

    db_files = ['astrotech.db', 'vehicles.db', 'vehicles_expanded.db', 'reflex.db']
    found_dbs = []

    for db_file in db_files:
        info = get_file_info(db_file)
        if info["exists"]:
            found_dbs.append(db_file)
            print(f"[OK] {db_file}: {info['size']:,} bytes, Legible: {info['readable']}")
        else:
            print(f"[X] {db_file}: No existe")

    # 2. Analizar contenido de cada BD
    print("\nCONTENIDO DE BASES DE DATOS:")
    print("-"*50)

    for db_file in found_dbs:
        result = check_database_contents(db_file)
        if "error" in result:
            print(f"[ERROR] {db_file}: ERROR - {result['error']}")
        else:
            print(f"\n[BD] {db_file}:")
            print(f"   Tablas: {list(result['tables'].keys())}")
            for table, count in result['tables'].items():
                print(f"   - {table}: {count:,} registros")

            if result.get('total_vehicles', 0) > 0:
                print(f"   Combustibles: {result.get('sample_fuels', [])}")
                print(f"   Marcas: {result.get('sample_brands', [])[:5]}...")
                print(f"   Columnas: {result.get('columns', [])}")

    # 3. Analizar imports Python
    print("\nüêç REFERENCIAS DE BASES DE DATOS EN C√ìDIGO PYTHON:")
    print("-"*50)

    python_refs = analyze_python_imports()
    for ref in python_refs:
        print(f"üìÑ {ref['file']}:")
        print(f"   BD references: {ref['db_references']}")
        print(f"   Vehicle imports: {ref['has_vehicle_import']}")
        print()

    # 4. Verificar configuraci√≥n
    print("‚öôÔ∏è CONFIGURACI√ìN ACTUAL:")
    print("-"*50)

    try:
        import settings
        print(f"‚úÖ settings.DATABASE_URL: {settings.DATABASE_URL}")
        print(f"‚úÖ DB Path exists: {settings.DATABASE_PATH.exists()}")
        print(f"‚úÖ DB Size: {settings.DATABASE_PATH.stat().st_size:,} bytes")
    except Exception as e:
        print(f"‚ùå Error al leer settings: {e}")

    try:
        import rxconfig
        print(f"‚úÖ rxconfig.db_url: {rxconfig.config.db_url}")
    except Exception as e:
        print(f"‚ùå Error al leer rxconfig: {e}")

    # 5. Analizar archivos CSS
    print("\nüé® AN√ÅLISIS DE ARCHIVOS CSS:")
    print("-"*50)

    css_analysis = check_css_files()
    for css in css_analysis:
        if css.get("exists", False):
            print(f"üé® {css['path']}:")
            print(f"   Size: {css['size']:,} bytes")
            print(f"   Lines: {css['line_count']:,}")
            print(f"   Select styles: {'‚úÖ' if css['has_select_styles'] else '‚ùå'}")
            print(f"   Radix styles: {'‚úÖ' if css['has_radix_styles'] else '‚ùå'}")
            print(f"   Pointer events: {'‚úÖ' if css['has_pointer_events'] else '‚ùå'}")
            if "error" in css:
                print(f"   ‚ö†Ô∏è Error: {css['error']}")
        else:
            print(f"‚ùå {css['path']}: No existe")

    # 6. Verificar estado actual de la app
    print("\nüöÄ ESTADO ACTUAL DE LA APLICACI√ìN:")
    print("-"*50)

    try:
        from utils.vehicle_data_simple import get_vehicle_fuel_types, get_vehicle_count
        fuel_types = get_vehicle_fuel_types()
        total_vehicles = get_vehicle_count()

        print(f"‚úÖ VehicleDataSimple conectado")
        print(f"   Total veh√≠culos: {total_vehicles:,}")
        print(f"   Tipos de combustible: {fuel_types}")

        if fuel_types:
            from utils.vehicle_data_simple import get_vehicle_brands
            brands = get_vehicle_brands(fuel_types[0])
            print(f"   Marcas ({fuel_types[0]}): {len(brands)} encontradas")

    except Exception as e:
        print(f"‚ùå Error al verificar VehicleDataSimple: {e}")

    # 7. Verificar archivos CSS cargados en la app
    print("\nüì¶ CSS CARGADOS EN APP.PY:")
    print("-"*50)

    try:
        with open('app.py', 'r', encoding='utf-8') as f:
            app_content = f.read()

        if 'styles.css' in app_content:
            print("‚úÖ styles.css est√° referenciado en app.py")
        if 'selector-fix.css' in app_content:
            print("‚úÖ selector-fix.css est√° referenciado en app.py")

        # Buscar imports de assets
        import re
        css_matches = re.findall(r'assets/([^"]+)\.css', app_content)
        for match in css_matches:
            print(f"   üìÑ {match}.css")

    except Exception as e:
        print(f"‚ùå Error al analizar app.py: {e}")

    # 8. Resumen y diagn√≥stico
    print("\nüéØ DIAGN√ìSTICO FINAL:")
    print("="*50)

    # BD principal
    if Path('astrotech.db').exists():
        astrotech_info = check_database_contents('astrotech.db')
        if astrotech_info.get('total_vehicles', 0) > 0:
            print("‚úÖ Base de datos principal (astrotech.db) tiene datos")
        else:
            print("‚ö†Ô∏è Base de datos principal (astrotech.db) est√° vac√≠a")

    # Conflictos de BD
    if len(found_dbs) > 1:
        print(f"‚ö†Ô∏è M√öLTIPLES BASES DE DATOS ENCONTRADAS: {found_dbs}")
        print("   Esto puede causar confusi√≥n en la aplicaci√≥n")

    # CSS
    existing_css = [css for css in css_analysis if css.get("exists", False)]
    if len(existing_css) > 1:
        print(f"‚ö†Ô∏è M√öLTIPLES ARCHIVOS CSS: {len(existing_css)} encontrados")
        for css in existing_css:
            if not css.get('has_radix_styles', False):
                print(f"   ‚ö†Ô∏è {css['path']}: No tiene estilos Radix UI")

    # Configuraci√≥n
    try:
        import settings
        if not settings.DATABASE_PATH.exists():
            print("‚ùå settings.DATABASE_PATH no existe")
        else:
            print("‚úÖ Configuraci√≥n de BD es correcta")
    except:
        print("‚ùå Error en configuraci√≥n de settings")

    print("\nüîß RECOMENDACIONES:")
    print("-"*30)
    print("1. Verificar que la app est√© usando 'astrotech.db'")
    print("2. Asegurar que solo exista un archivo CSS principal")
    print("3. Comprobar que los estilos Radix UI est√©n cargados")
    print("4. Revisar que no haya bloqueos pointer-events en CSS")
    print("5. Verificar imports de estado en vehicle_selector.py")

    print("\n" + "="*80)

if __name__ == "__main__":
    main()